// Mocks generated by Mockito 5.4.4 from annotations
// in masinqo/test/unit_tests/domain/artist_signup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:masinqo/infrastructure/auth/signup/artist_signup_datasource.dart'
    as _i2;
import 'package:masinqo/infrastructure/auth/signup/artist_signup_dto.dart'
    as _i8;
import 'package:masinqo/infrastructure/auth/signup/artist_signup_repository.dart'
    as _i4;
import 'package:masinqo/infrastructure/auth/signup_failure.dart' as _i6;
import 'package:masinqo/infrastructure/auth/signup_success.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArtistSignupDataSource_0 extends _i1.SmartFake
    implements _i2.ArtistSignupDataSource {
  _FakeArtistSignupDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArtistSignupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArtistSignupRepository extends _i1.Mock
    implements _i4.ArtistSignupRepository {
  MockArtistSignupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArtistSignupDataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeArtistSignupDataSource_0(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i2.ArtistSignupDataSource);

  @override
  _i5.Future<_i3.Either<_i6.SignupRequestFailure, _i7.SignupRequestSuccess>>
      signupArtist(_i8.ArtistSignupDTO? artist) => (super.noSuchMethod(
            Invocation.method(
              #signupArtist,
              [artist],
            ),
            returnValue: _i5.Future<
                _i3.Either<_i6.SignupRequestFailure,
                    _i7.SignupRequestSuccess>>.value(_FakeEither_1<
                _i6.SignupRequestFailure, _i7.SignupRequestSuccess>(
              this,
              Invocation.method(
                #signupArtist,
                [artist],
              ),
            )),
          ) as _i5.Future<
              _i3.Either<_i6.SignupRequestFailure, _i7.SignupRequestSuccess>>);
}
